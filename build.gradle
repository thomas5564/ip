plugins {
    id 'java'
    id 'application'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
    id 'checkstyle'
    id 'org.openjfx.javafxplugin' version '0.1.0'
}
run {
    enableAssertions = true
}
javafx {
    version = "21.0.2"
    modules = [ 'javafx.controls', 'javafx.fxml' ]
}

checkstyle {
    toolVersion = '11.0.0'
}

repositories {
    mavenCentral()
}

dependencies {
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.10.0'
    testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.10.0'

    implementation group: 'org.openjfx', name: 'javafx-base', version: '21.0.2', classifier: 'win'
    implementation group: 'org.openjfx', name: 'javafx-base', version: '21.0.2', classifier: 'mac'
    implementation group: 'org.openjfx', name: 'javafx-base', version: '21.0.2', classifier: 'linux'
    implementation group: 'org.openjfx', name: 'javafx-controls', version: '21.0.2', classifier: 'win'
    implementation group: 'org.openjfx', name: 'javafx-controls', version: '21.0.2', classifier: 'mac'
    implementation group: 'org.openjfx', name: 'javafx-controls', version: '21.0.2', classifier: 'linux'
    implementation group: 'org.openjfx', name: 'javafx-fxml', version: '21.0.2', classifier: 'win'
    implementation group: 'org.openjfx', name: 'javafx-fxml', version: '21.0.2', classifier: 'mac'
    implementation group: 'org.openjfx', name: 'javafx-fxml', version: '21.0.2', classifier: 'linux'
    implementation group: 'org.openjfx', name: 'javafx-graphics', version: '21.0.2', classifier: 'win'
    implementation group: 'org.openjfx', name: 'javafx-graphics', version: '21.0.2', classifier: 'mac'
    implementation group: 'org.openjfx', name: 'javafx-graphics', version: '21.0.2', classifier: 'linux'

}

test {
    useJUnitPlatform()

    testLogging {
        events "passed", "skipped", "failed"

        showExceptions true
        exceptionFormat "full"
        showCauses true
        showStackTraces true
        showStandardStreams = false
    }
}
application {
    mainClass.set("avo.main.Launcher")
}

shadowJar {
    archiveBaseName.set("Avo")
    archiveClassifier.set(null)
    archiveVersion.set(null)

    // ðŸ”‘ Proper Gradle syntax to include all runtime dependencies
    from {
        project.configurations.runtimeClasspath.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }

    manifest {
        attributes 'Main-Class': 'avo.main.Launcher'
    }
}

tasks {
    distZip {
        dependsOn(shadowJar)
    }
    distTar {
        dependsOn(shadowJar)
    }
    startScripts {
        dependsOn(shadowJar)
    }
}
tasks.build {
    dependsOn shadowJar
}
artifacts {
    archives shadowJar
}


run{
    standardInput = System.in
}
